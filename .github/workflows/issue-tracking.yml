name: Issue Tracking and Deployment Monitoring

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
  workflow_dispatch: # Allow manual trigger

jobs:
  track-deployment-issues:
    name: Track Deployment Issues
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for commit info
        
    - name: Get workflow run information
      id: workflow-info
      run: |
        echo "workflow_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
        echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
        echo "workflow_conclusion=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
        echo "workflow_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
        echo "triggered_by=${{ github.event.workflow_run.actor.login }}" >> $GITHUB_OUTPUT
        
    - name: Get commit information
      id: commit-info
      run: |
        echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "commit_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        echo "commit_date=$(git log -1 --pretty=format:'%cd')" >> $GITHUB_OUTPUT
        echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
        
        # Extract issue numbers from commit message
        ISSUE_NUMBERS=$(echo "${{ steps.commit-info.outputs.commit_message }}" | grep -o '#[0-9]*' | tr '\n' ' ' || echo "None")
        echo "issue_numbers=${ISSUE_NUMBERS}" >> $GITHUB_OUTPUT
        
        # Get recent commits for context
        echo "recent_commits<<EOF" >> $GITHUB_OUTPUT
        git log --oneline -10 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Get workflow logs
      id: workflow-logs
      run: |
        # Get the workflow run logs URL
        echo "logs_url=${{ github.event.workflow_run.logs_url }}" >> $GITHUB_OUTPUT
        
        # Try to get some basic error information
        echo "error_summary<<EOF" >> $GITHUB_OUTPUT
        echo "Workflow failed with conclusion: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
        echo "Check the full logs for detailed error information." >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create issue for failed deployment
      uses: actions/github-script@v7
      with:
        script: |
          const issueTitle = `🚨 Deployment Failed: ${context.payload.workflow_run.name}`;
          
          const issueBody = `## 🚨 Deployment Failure Report
          
          ### 📋 Failure Summary
          - **Workflow**: ${context.payload.workflow_run.name}
          - **Status**: ${context.payload.workflow_run.conclusion}
          - **Triggered By**: @${context.payload.workflow_run.actor.login}
          - **Workflow Run**: [View Details](${context.payload.workflow_run.html_url})
          - **Logs**: [View Logs](${context.payload.workflow_run.logs_url})
          
          ### 🔗 Commit Information
          - **Commit Hash**: \`${{ steps.commit-info.outputs.commit_hash }}\`
          - **Commit Message**: ${{ steps.commit-info.outputs.commit_message }}
          - **Author**: ${{ steps.commit-info.outputs.commit_author }}
          - **Date**: ${{ steps.commit-info.outputs.commit_date }}
          - **Branch**: ${{ steps.commit-info.outputs.branch }}
          - **Related Issues**: ${{ steps.commit-info.outputs.issue_numbers }}
          
          ### 📝 Recent Commits
          \`\`\`
          ${{ steps.commit-info.outputs.recent_commits }}
          \`\`\`
          
          ### 🔍 Error Summary
          ${{ steps.workflow-logs.outputs.error_summary }}
          
          ### 🛠️ Troubleshooting Steps
          1. [ ] Review the workflow logs for specific error details
          2. [ ] Check if the issue is related to recent changes
          3. [ ] Verify environment variables and secrets are configured correctly
          4. [ ] Test the deployment locally if possible
          5. [ ] Check service quotas and limits (Vercel/Render)
          6. [ ] Verify database connectivity and configuration
          
          ### 🏷️ Labels
          - \`deployment-failure\`
          - \`ci-cd\`
          - \`needs-investigation\`
          
          ### 👥 Assignees
          - @${{ steps.commit-info.outputs.commit_author }}
          
          ---
          
          **Note**: This issue was automatically created by the CI/CD pipeline monitoring system.
          `;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['deployment-failure', 'ci-cd', 'needs-investigation'],
            assignees: ['${{ steps.commit-info.outputs.commit_author }}']
          });
          
          console.log(`Created issue #${issue.data.number} for deployment failure`);
          
    - name: Log issue creation
      run: |
        echo "📋 Issue Tracking Summary:"
        echo "=========================="
        echo "Workflow: ${{ steps.workflow-info.outputs.workflow_name }}"
        echo "Status: ${{ steps.workflow-info.outputs.workflow_conclusion }}"
        echo "Commit: ${{ steps.commit-info.outputs.commit_hash }}"
        echo "Author: ${{ steps.commit-info.outputs.commit_author }}"
        echo "Issues: ${{ steps.commit-info.outputs.issue_numbers }}"
        echo ""
        echo "✅ Issue created for deployment failure tracking"

  track-successful-deployments:
    name: Track Successful Deployments
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for commit info
        
    - name: Get deployment information
      id: deployment-info
      run: |
        echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "commit_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        echo "commit_date=$(git log -1 --pretty=format:'%cd')" >> $GITHUB_OUTPUT
        echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
        
        # Extract issue numbers from commit message
        ISSUE_NUMBERS=$(echo "${{ steps.deployment-info.outputs.commit_message }}" | grep -o '#[0-9]*' | tr '\n' ' ' || echo "None")
        echo "issue_numbers=${ISSUE_NUMBERS}" >> $GITHUB_OUTPUT
        
    - name: Log successful deployment
      run: |
        echo "🎉 Successful Deployment Tracking:"
        echo "=================================="
        echo "Commit: ${{ steps.deployment-info.outputs.commit_hash }}"
        echo "Message: ${{ steps.deployment-info.outputs.commit_message }}"
        echo "Author: ${{ steps.deployment-info.outputs.commit_author }}"
        echo "Branch: ${{ steps.deployment-info.outputs.branch }}"
        echo "Issues: ${{ steps.deployment-info.outputs.issue_numbers }}"
        echo ""
        echo "✅ Deployment completed successfully"
        echo "🌐 Frontend: https://vnr-keys.vercel.app"
        echo "🔧 Backend: Deployed to Render"
        
    - name: Comment on related issues
      if: steps.deployment-info.outputs.issue_numbers != 'None'
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumbers = '${{ steps.deployment-info.outputs.issue_numbers }}'.match(/#(\d+)/g);
          
          if (issueNumbers) {
            for (const issueRef of issueNumbers) {
              const issueNumber = issueRef.replace('#', '');
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: `## 🚀 Deployment Update
                  
                  **Status**: ✅ Successfully deployed
                  
                  ### 📋 Deployment Details
                  - **Commit**: \`${{ steps.deployment-info.outputs.commit_hash }}\`
                  - **Message**: ${{ steps.deployment-info.outputs.commit_message }}
                  - **Author**: ${{ steps.deployment-info.outputs.commit_author }}
                  - **Date**: ${{ steps.deployment-info.outputs.commit_date }}
                  - **Branch**: ${{ steps.deployment-info.outputs.branch }}
                  
                  ### 🌐 Live Services
                  - **Frontend**: [vnr-keys.vercel.app](https://vnr-keys.vercel.app)
                  - **Backend**: Deployed to Render
                  
                  ---
                  
                  *This comment was automatically generated by the CI/CD pipeline.*
                  `
                });
                
                console.log(`Commented on issue #${issueNumber}`);
              } catch (error) {
                console.log(`Could not comment on issue #${issueNumber}: ${error.message}`);
              }
            }
          }
