name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Lint and Test Frontend
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        npm-version: ${{ env.NPM_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 1

  # Lint and Test Backend
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        npm-version: ${{ env.NPM_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run backend tests (if available)
      working-directory: ./backend
      run: |
        if npm run test 2>/dev/null; then
          npm run test
        else
          echo "No test script found, skipping tests"
        fi
      continue-on-error: true
      
    - name: Check backend syntax
      working-directory: ./backend
      run: node -c index.js
      
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/
        retention-days: 1

  # Security and Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        npm-version: ${{ env.NPM_VERSION }}
        
    - name: Run security audit
      run: |
        cd frontend && npm audit --audit-level moderate
        cd ../backend && npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: HEAD~1
        head: HEAD
      continue-on-error: true

  # Deploy to Vercel (Frontend)
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [frontend-ci, security-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  # Deploy to Render (Backend)
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [backend-ci, security-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/
        
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v1.0.0
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

  # Notify on completion
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify success
      if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "Frontend: https://vnr-keys.vercel.app"
        echo "Backend: Deployed to Render"
        
    - name: Notify failure
      if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs for more details."
