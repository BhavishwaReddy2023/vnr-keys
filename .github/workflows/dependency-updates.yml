name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for commit info
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        npm-version: '9'
        
    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Get current commit info
      id: current-commit
      run: |
        echo "current_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "current_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "current_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        echo "current_date=$(git log -1 --pretty=format:'%cd')" >> $GITHUB_OUTPUT
        
    - name: Check for frontend dependency updates
      working-directory: ./frontend
      run: |
        npm outdated --json > outdated.json || echo "{}" > outdated.json
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "Frontend dependencies need updates"
          npm update
          npm audit fix
          echo "frontend_updated=true" >> $GITHUB_ENV
        else
          echo "Frontend dependencies are up to date"
          echo "frontend_updated=false" >> $GITHUB_ENV
        fi
        
    - name: Check for backend dependency updates
      working-directory: ./backend
      run: |
        npm outdated --json > outdated.json || echo "{}" > outdated.json
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "Backend dependencies need updates"
          npm update
          npm audit fix
          echo "backend_updated=true" >> $GITHUB_ENV
        else
          echo "Backend dependencies are up to date"
          echo "backend_updated=false" >> $GITHUB_ENV
        fi
        
    - name: Get updated commit info
      id: updated-commit
      run: |
        echo "updated_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "updated_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "updated_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        echo "updated_date=$(git log -1 --pretty=format:'%cd')" >> $GITHUB_OUTPUT
        
        # Get list of changed files
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        git diff --name-only ${{ steps.current-commit.outputs.current_hash }}..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Get recent commits for changelog
        echo "recent_commits<<EOF" >> $GITHUB_OUTPUT
        git log --oneline -5 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Pull Request if updates exist
      uses: peter-evans/create-pull-request@v5
      if: env.frontend_updated == 'true' || env.backend_updated == 'true'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: '🤖 Automated Dependency Updates'
        body: |
          ## 🤖 Automated Dependency Updates
          
          This PR contains automated dependency updates generated by the CI/CD pipeline.
          
          ### 📋 Update Summary
          - **Frontend Updated**: ${{ env.frontend_updated == 'true' && '✅ Yes' || '❌ No' }}
          - **Backend Updated**: ${{ env.backend_updated == 'true' && '✅ Yes' || '❌ No' }}
          
          ### 🔗 Commit Information
          - **Previous Commit**: `${{ steps.current-commit.outputs.current_hash }}`
          - **Updated Commit**: `${{ steps.updated-commit.outputs.updated_hash }}`
          - **Updated By**: ${{ steps.updated-commit.outputs.updated_author }}
          - **Update Date**: ${{ steps.updated-commit.outputs.updated_date }}
          
          ### 📝 Recent Changes
          ```
          ${{ steps.updated-commit.outputs.recent_commits }}
          ```
          
          ### 📁 Changed Files
          ```
          ${{ steps.updated-commit.outputs.changed_files }}
          ```
          
          ### 🧪 Testing Checklist
          - [ ] Frontend builds successfully
          - [ ] Backend starts without errors
          - [ ] No breaking changes introduced
          - [ ] All tests pass (if available)
          - [ ] Security audit passes
          
          ### 🔍 Review Instructions
          1. Review the dependency changes
          2. Check for any breaking changes
          3. Verify that the application still works
          4. Run local tests if needed
          5. Approve and merge if everything looks good
          
          ### 📚 Related Issues
          - This update addresses security vulnerabilities and keeps dependencies current
          - Automated by GitHub Actions workflow
          - Generated on: ${{ steps.updated-commit.outputs.updated_date }}
          
          ---
          
          **Note**: This is an automated PR. Please review carefully before merging.
        branch: chore/dependency-updates
        delete-branch: true
        
    - name: Log update summary
      run: |
        echo "📋 Dependency Update Summary:"
        echo "============================="
        echo "Frontend Updated: ${{ env.frontend_updated }}"
        echo "Backend Updated: ${{ env.backend_updated }}"
        echo ""
        echo "Previous Commit: ${{ steps.current-commit.outputs.current_hash }}"
        echo "Updated Commit: ${{ steps.updated-commit.outputs.updated_hash }}"
        echo ""
        if [ "${{ env.frontend_updated }}" == "true" ] || [ "${{ env.backend_updated }}" == "true" ]; then
          echo "✅ Pull request created for dependency updates"
        else
          echo "ℹ️  No dependency updates needed"
        fi
